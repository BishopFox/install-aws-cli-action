name: test

on: [push, workflow_dispatch]

jobs:
  dispatch_test_action:
    name: Dispatch test action
    runs-on: ubuntu-latest
    env:
      GH_OWNER: unfor19
      GH_REPO: install-aws-cli-action-test
      GH_WORKFLOW: test-action.yml
      GH_REF: master
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      - name: Workflow Dispatch
        run: |
          curl -X POST -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            https://api.github.com/repos/${GH_OWNER}/${GH_REPO}/actions/workflows/${GH_WORKFLOW}/dispatches \
            -d '{"ref":"'${GH_REF}'"}'

  # docker_build:
  #   runs-on: ubuntu-20.04
  #   name: docker build
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Inject slug/short variables
  #       uses: rlespinasse/github-slug-action@v3.x
  #     - name: Set env vars
  #       id: env_vars
  #       run: |
  #         export BRANCH_NAME=${{ env.GITHUB_REF_SLUG }}
  #         export DOCKER_TAG=docker.pkg.github.com/${GITHUB_REPOSITORY}/${BRANCH_NAME//\//-}
  #         echo "$DOCKER_TAG" >> $GITHUB_ENV
  #         echo "::set-output name=docker_tag::${DOCKER_TAG}"
  #     - name: docker login
  #       run: |
  #         echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
  #     - name: docker pull
  #       run: |
  #         docker pull "$DOCKER_TAG" || true
  #     - name: docker build
  #       run: docker build . -t cached --cache-from="$DOCKER_TAG"
  #     - name: docker tag
  #       run: docker tag cached "$DOCKER_TAG"
  #     - name: docker push
  #       run: docker push "$DOCKER_TAG" || true
  #   outputs:
  #     docker_tag: ${{ steps.env_vars.outputs.docker_tag }}

  test:
    needs: docker_build
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - TEST_NAME: Latest v2
            AWS_CLI_VERSION: "2"
          - TEST_NAME: Specific v2
            AWS_CLI_VERSION: "2.0.30"
          - TEST_NAME: Latest v1
            AWS_CLI_VERSION: "1"
          - TEST_NAME: Specific v1
            AWS_CLI_VERSION: "1.16.312"
          - TEST_NAME: No Input
    name: Test
    # env:
    #   DOCKER_TAG: ${{ needs.docker_build.outputs.docker_tag }}
    steps:
      - uses: actions/checkout@v2
      - name: test on Runner
        env:
          AWS_CLI_VERSION: "${{ matrix.AWS_CLI_VERSION}}"
          AWS_CLI_ARCH: "${{ matrix.AWS_CLI_ARCH }}"
        run: |
          sudo ./entrypoint.sh

  # test_latest_version_v1:
  #   needs: docker_build
  #   runs-on: ubuntu-latest
  #   name: latest v1
  #   env:
  #     AWS_CLI_VERSION: 1
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: test on Runner
  #       run: |
  #         sudo ./entrypoint.sh
  #     - name: Inject slug/short variables
  #       uses: rlespinasse/github-slug-action@v3.x
  #     - name: Set env vars
  #       run: |
  #         export BRANCH_NAME=${{ env.GITHUB_REF_SLUG }}
  #         echo DOCKER_TAG=docker.pkg.github.com/${GITHUB_REPOSITORY}/${BRANCH_NAME//\//-} >> $GITHUB_ENV
  #     - name: docker login
  #       run: |
  #         echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
  #     - name: docker pull
  #       run: |
  #         docker pull "$DOCKER_TAG" || true
  #     - name: test in Docker
  #       run: |
  #         docker run --rm "$DOCKER_TAG" $AWS_CLI_VERSION

  # test_latest_version_v2:
  #   needs: docker_build
  #   runs-on: ubuntu-latest
  #   name: latest v2
  #   env:
  #     AWS_CLI_VERSION: 2
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: test on Runner
  #       run: |
  #         sudo ./entrypoint.sh
  #     - name: Inject slug/short variables
  #       uses: rlespinasse/github-slug-action@v3.x
  #     - name: Set env vars
  #       run: |
  #         export BRANCH_NAME=${{ env.GITHUB_REF_SLUG }}
  #         echo DOCKER_TAG=docker.pkg.github.com/${GITHUB_REPOSITORY}/${BRANCH_NAME//\//-} >> $GITHUB_ENV
  #     - name: docker login
  #       run: |
  #         echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
  #     - name: docker pull
  #       run: |
  #         docker pull "$DOCKER_TAG" || true
  #     - name: test in Docker
  #       run: |
  #         docker run --rm "$DOCKER_TAG" $AWS_CLI_VERSION

  # test_specific_v1:
  #   needs: docker_build
  #   runs-on: ubuntu-latest
  #   name: specific v1
  #   env:
  #     AWS_CLI_VERSION: 1.18.1
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: test on Runner
  #       run: |
  #         sudo ./entrypoint.sh
  #     - name: Inject slug/short variables
  #       uses: rlespinasse/github-slug-action@v3.x
  #     - name: Set env vars
  #       run: |
  #         export BRANCH_NAME=${{ env.GITHUB_REF_SLUG }}
  #         echo DOCKER_TAG=docker.pkg.github.com/${GITHUB_REPOSITORY}/${BRANCH_NAME//\//-} >> $GITHUB_ENV
  #     - name: docker login
  #       run: |
  #         echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
  #     - name: docker pull
  #       run: |
  #         docker pull "$DOCKER_TAG" || true
  #     - name: test in Docker
  #       run: |
  #         docker run --rm "$DOCKER_TAG" $AWS_CLI_VERSION

  # test_specific_v2:
  #   needs: docker_build
  #   runs-on: ubuntu-latest
  #   name: specific v2
  #   env:
  #     AWS_CLI_VERSION: 2.0.30
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: test on Runner
  #       run: |
  #         sudo ./entrypoint.sh
  #     - name: Inject slug/short variables
  #       uses: rlespinasse/github-slug-action@v3.x
  #     - name: Set env vars
  #       run: |
  #         export BRANCH_NAME=${{ env.GITHUB_REF_SLUG }}
  #         echo DOCKER_TAG=docker.pkg.github.com/${GITHUB_REPOSITORY}/${BRANCH_NAME//\//-} >> $GITHUB_ENV
  #     - name: docker login
  #       run: |
  #         echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
  #     - name: docker pull
  #       run: |
  #         docker pull "$DOCKER_TAG" || true
  #     - name: test in Docker
  #       run: |
  #         docker run --rm "$DOCKER_TAG" $AWS_CLI_VERSION
